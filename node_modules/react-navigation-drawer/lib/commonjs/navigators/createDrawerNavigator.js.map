{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["defaultContentComponent","props","top","horizontal","DefaultDrawerConfig","drawerWidth","Dimensions","get","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","contentComponent","drawerPosition","I18nManager","isRTL","keyboardDismissMode","drawerBackgroundColor","light","ThemeColors","bodyContent","dark","overlayColor","drawerType","hideStatusBar","statusBarAnimation","DrawerNavigator","routeConfigs","config","mergedConfig","drawerRouter","navigator","DrawerView"],"mappings":"saAAA,oDACA,yCACA,iDAQA,6EACA,uEACA,2F,84BASA,GAAMA,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,KAAD,QAC9B,qBAAC,uBAAD,EAAY,oBAAoB,CAAE,KAAlC,iDACE,oBAAC,6BAAD,EAAc,UAAU,CAAE,CAAEC,GAAG,CAAE,QAAP,CAAiBC,UAAU,CAAE,OAA7B,CAA1B,iDACE,oBAAC,6BAAD,0BAAiBF,KAAjB,mDADF,CADF,CAD8B,EAAhC,CAQA,GAAMG,CAAAA,mBAA2C,CAAG,CAClDC,WAAW,CAAE,sBAAM,qBAMSC,wBAAWC,GAAX,CAAe,QAAf,CANT,CAMTC,MANS,iBAMTA,MANS,CAMDC,KANC,iBAMDA,KANC,CAOjB,GAAMC,CAAAA,eAAe,CAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,CAAiBC,KAAjB,CAAxB,CACA,GAAMI,CAAAA,WAAW,CAAGJ,KAAK,CAAGD,MAA5B,CACA,GAAMM,CAAAA,QAAQ,CAAGJ,eAAe,EAAI,GAApC,CACA,GAAMK,CAAAA,YAAY,CAAGC,sBAASC,EAAT,GAAgB,KAAhB,CAAyBJ,WAAW,CAAG,EAAH,CAAQ,EAA5C,CAAkD,EAAvE,CACA,GAAMK,CAAAA,QAAQ,CAAGJ,QAAQ,CAAG,GAAH,CAAS,GAAlC,CAEA,MAAOH,CAAAA,IAAI,CAACC,GAAL,CAASF,eAAe,CAAGK,YAA3B,CAAyCG,QAAzC,CAAP,CACD,CAfiD,CAgBlDC,gBAAgB,CAAEnB,uBAhBgC,CAiBlDoB,cAAc,CAAEC,yBAAYC,KAAZ,CAAoB,OAApB,CAA8B,MAjBI,CAkBlDC,mBAAmB,CAAE,SAlB6B,CAmBlDC,qBAAqB,CAAE,CACrBC,KAAK,CAAEC,6BAAYD,KAAZ,CAAkBE,WADJ,CAErBC,IAAI,CAAEF,6BAAYE,IAAZ,CAAiBD,WAFF,CAnB2B,CAuBlDE,YAAY,CAAE,CACZJ,KAAK,CAAE,oBADK,CAEZG,IAAI,CAAE,oBAFM,CAvBoC,CA2BlDE,UAAU,CAAE,OA3BsC,CA4BlDC,aAAa,CAAE,KA5BmC,CA6BlDC,kBAAkB,CAAE,OA7B8B,CAApD,CAgCA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CACtBC,YADsB,CAWnB,IANHC,CAAAA,MAMG,2DADC,EACD,CACH,GAAMC,CAAAA,YAAY,kBAAQhC,mBAAR,IAAgC+B,MAAhC,CAAlB,CACA,GAAME,CAAAA,YAAY,CAAG,0BAAaH,YAAb,CAA2BE,YAA3B,CAArB,CAIA,GAAME,CAAAA,SAAS,CAAG,qCAAgBC,mBAAhB,CAA4BF,YAA5B,CAA0CD,YAA1C,CAAlB,CACA,MAAOE,CAAAA,SAAP,CACD,CAnBD,C,aAqBeL,e","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, ScrollView, I18nManager } from 'react-native';\nimport {\n  createNavigator,\n  ThemeColors,\n  SafeAreaView,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationRoute,\n} from 'react-navigation';\nimport DrawerRouter from '../routers/DrawerRouter';\nimport DrawerView from '../views/DrawerView';\nimport DrawerItems from '../views/DrawerNavigatorItems';\nimport {\n  NavigationDrawerOptions,\n  NavigationDrawerProp,\n  NavigationDrawerConfig,\n  NavigationDrawerRouterConfig,\n  DrawerContentComponentProps,\n} from '../types';\n\nconst defaultContentComponent = (props: DrawerContentComponentProps) => (\n  <ScrollView alwaysBounceVertical={false}>\n    <SafeAreaView forceInset={{ top: 'always', horizontal: 'never' }}>\n      <DrawerItems {...props} />\n    </SafeAreaView>\n  </ScrollView>\n);\n\nconst DefaultDrawerConfig: NavigationDrawerConfig = {\n  drawerWidth: () => {\n    /*\n     * Default drawer width is screen width - header height\n     * with a max width of 280 on mobile and 320 on tablet\n     * https://material.io/guidelines/patterns/navigation-drawer.html\n     */\n    const { height, width } = Dimensions.get('window');\n    const smallerAxisSize = Math.min(height, width);\n    const isLandscape = width > height;\n    const isTablet = smallerAxisSize >= 600;\n    const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n    const maxWidth = isTablet ? 320 : 280;\n\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  },\n  contentComponent: defaultContentComponent,\n  drawerPosition: I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode: 'on-drag',\n  drawerBackgroundColor: {\n    light: ThemeColors.light.bodyContent,\n    dark: ThemeColors.dark.bodyContent,\n  },\n  overlayColor: {\n    light: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.5)',\n  },\n  drawerType: 'front',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide',\n};\n\nconst DrawerNavigator = (\n  routeConfigs: NavigationRouteConfigMap<\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  >,\n  config: CreateNavigatorConfig<\n    NavigationDrawerConfig,\n    NavigationDrawerRouterConfig,\n    NavigationDrawerOptions,\n    NavigationDrawerProp<NavigationRoute, any>\n  > = {}\n) => {\n  const mergedConfig = { ...DefaultDrawerConfig, ...config };\n  const drawerRouter = DrawerRouter(routeConfigs, mergedConfig);\n\n  // TODO: don't have time to fix it right now\n  // @ts-ignore\n  const navigator = createNavigator(DrawerView, drawerRouter, mergedConfig);\n  return navigator;\n};\n\nexport default DrawerNavigator;\n"]}