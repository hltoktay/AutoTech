{"version":3,"sources":["DrawerRouter.tsx"],"names":["withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","unmountInactiveRoutes","resetOnBlur","switchRouter","getActionCreators","navStateKey","openDrawer","DrawerActions","closeDrawer","toggleDrawer","getStateForAction","action","state","undefined","isDrawerOpen","isRouterTargeted","type","CLOSE_DRAWER","NavigationActions","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"mappings":"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","sourcesContent":["import {\n  SwitchRouter,\n  NavigationActions,\n  NavigationAction,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n} from 'react-navigation';\nimport * as DrawerActions from './DrawerActions';\n\ntype State = NavigationRoute & {\n  isDrawerOpen?: any;\n};\n\nfunction withDefaultValue(obj: object, key: string, defaultValue: any): any {\n  // @ts-ignore\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  // @ts-ignore\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = (route: NavigationRoute): string => {\n  if (\n    route.routes &&\n    typeof route.index === 'number' &&\n    route.routes[route.index]\n  ) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (\n  routeConfigs: NavigationRouteConfigMap<any, any>,\n  config: {\n    unmountInactiveRoutes?: boolean;\n    resetOnBlur?: boolean;\n    initialRouteName?: string;\n  } = {}\n) => {\n  config = { ...config };\n  config = withDefaultValue(\n    config,\n    'resetOnBlur',\n    config.unmountInactiveRoutes ? true : !!config.resetOnBlur\n  );\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route: NavigationRoute, navStateKey: string) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey),\n      };\n    },\n\n    getStateForAction(action: NavigationAction, state?: State) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n        if (\n          action.type === DrawerActions.CLOSE_DRAWER ||\n          (action.type === NavigationActions.BACK && state.isDrawerOpen)\n        ) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (\n          getActiveRouteKey(switchedState) !== getActiveRouteKey(state) &&\n          state.isDrawerOpen\n        ) {\n          return {\n            ...switchedState,\n            isDrawerOpen: false,\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    },\n  };\n};\n"]}