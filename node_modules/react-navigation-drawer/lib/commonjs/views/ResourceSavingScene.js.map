{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","ResourceSavingScene","screensEnabled","props","isVisible","rest","children","style","styles","container","Platform","OS","attached","detached","React","Component","StyleSheet","create","flex","overflow","top"],"mappings":"k5BAEA,oDACA,yCACA,wD,8GAQA,GAAMA,CAAAA,YAAY,CAAG,IAArB,C,GAEqBC,CAAAA,mB,gYACV,CACP,GAAIC,oCAAkB,wCAAtB,CAAwC,iBACP,KAAKC,KADE,CAC9BC,UAD8B,aAC9BA,SAD8B,CAChBC,KADgB,kEAItC,MAAO,qBAAC,0BAAD,wBAAQ,MAAM,CAAED,UAAS,CAAG,CAAH,CAAO,CAAhC,EAAuCC,KAAvC,mDAAP,CACD,CANM,iBAOyC,KAAKF,KAP9C,CAOCC,SAPD,cAOCA,SAPD,CAOYE,QAPZ,cAOYA,QAPZ,CAOsBC,KAPtB,cAOsBA,KAPtB,CAOgCF,IAPhC,sFASP,MACE,qBAAC,iBAAD,wBACE,KAAK,CAAE,CAACG,MAAM,CAACC,SAAR,CAAmBF,KAAnB,CADT,CAEE,WAAW,CAAE,KAFf,CAGE,qBAAqB,CAGnBG,sBAASC,EAAT,GAAgB,KAAhB,CAAwB,CAACP,SAAzB,CAAqC,IANzC,CAQE,aAAa,CAAEA,SAAS,CAAG,MAAH,CAAY,MARtC,EASMC,IATN,mDAWE,oBAAC,iBAAD,EAAM,KAAK,CAAED,SAAS,CAAGI,MAAM,CAACI,QAAV,CAAqBJ,MAAM,CAACK,QAAlD,iDACGP,QADH,CAXF,CADF,CAiBD,C,iCA3B8CQ,KAAK,CAACC,S,sCA8BvD,GAAMP,CAAAA,MAAM,CAAGQ,wBAAWC,MAAX,CAAkB,CAC/BR,SAAS,CAAE,CACTS,IAAI,CAAE,CADG,CAETC,QAAQ,CAAE,QAFD,CADoB,CAK/BP,QAAQ,CAAE,CACRM,IAAI,CAAE,CADE,CALqB,CAQ/BL,QAAQ,CAAE,CACRK,IAAI,CAAE,CADE,CAERE,GAAG,CAAEpB,YAFG,CARqB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { Screen, screensEnabled } from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    if (screensEnabled && screensEnabled()) {\n      const { isVisible, ...rest } = this.props;\n\n      // @ts-ignore\n      return <Screen active={isVisible ? 1 : 0} {...rest} />;\n    }\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[styles.container, style]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]}