{"version":3,"sources":["DrawerSidebar.tsx"],"names":["DrawerSidebar","getScreenOptions","routeKey","descriptor","props","descriptors","options","Error","getLabel","focused","tintColor","route","key","drawerLabel","title","routeName","renderIcon","drawerIcon","handleItemPress","navigation","closeDrawer","dispatch","NavigationActions","navigate","ContentComponent","contentComponent","state","index","styles","container","style","contentOptions","drawerOpenProgress","routes","screenProps","drawerPosition","React","PureComponent","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}