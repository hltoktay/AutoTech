{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","activeTintColor","props","context","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","items","activeItemKey","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","getActiveTintColor","getActiveBackgroundColor","getInactiveTintColor","getInactiveBackgroundColor","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","inactiveIcon","React","Component","defaultProps","light","dark","contextType","ThemeContext","StyleSheet","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]}