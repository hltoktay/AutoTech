{"version":3,"sources":["DrawerRouter.test.tsx"],"names":["React","DrawerRouter","NavigationActions","SwitchRouter","StackRouter","DrawerActions","INIT_ACTION","type","INIT","it","ScreenA","ScreenB","router","Foo","screen","Bar","state","getStateForAction","expectedState","index","isTransitioning","routes","key","routeName","params","undefined","isDrawerOpen","expect","toEqual","state2","NAVIGATE","expectedState2","getComponentForState","FooScreen","BarScreen","initialRouteName","OPEN_DRAWER","state3","CLOSE_DRAWER","state4","TOGGLE_DRAWER","action","lastState","changed","FooView","Component","BarRouter","Qux","Quo","BarView","emptyState","init","initState","openDrawer","toBe","state0","navigate","initSwitchState","initQuxState","state1","setParams","foo","state1switchState","state1quxState","DrawerScreen","Baz","Drawer","DRAWER_OPENED","back"],"mappings":"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","sourcesContent":["/* eslint react/display-name:0 */\n\nimport * as React from 'react';\nimport DrawerRouter from '../DrawerRouter';\n\nimport { NavigationActions, SwitchRouter, StackRouter } from 'react-navigation';\nimport * as DrawerActions from '../../routers/DrawerActions';\n\nconst INIT_ACTION = { type: NavigationActions.INIT };\n\nit('handles basic drawer logic and fires close on switch', () => {\n  const ScreenA = () => <div />;\n  const ScreenB = () => <div />;\n  const router = DrawerRouter({\n    Foo: { screen: ScreenA },\n    Bar: { screen: ScreenB },\n  });\n  const state = router.getStateForAction(INIT_ACTION);\n  const expectedState = {\n    index: 0,\n    isTransitioning: false,\n    routes: [\n      { key: 'Foo', routeName: 'Foo', params: undefined },\n      { key: 'Bar', routeName: 'Bar', params: undefined },\n    ],\n    isDrawerOpen: false,\n  };\n  expect(state).toEqual(expectedState);\n  const state2 = router.getStateForAction(\n    { type: NavigationActions.NAVIGATE, routeName: 'Bar' },\n    state\n  );\n  const expectedState2 = {\n    index: 1,\n    isTransitioning: false,\n    routes: [\n      { key: 'Foo', routeName: 'Foo', params: undefined },\n      { key: 'Bar', routeName: 'Bar', params: undefined },\n    ],\n    isDrawerOpen: false,\n  };\n  expect(state2).toEqual(expectedState2);\n  expect(router.getComponentForState(expectedState)).toEqual(ScreenA);\n  expect(router.getComponentForState(expectedState2)).toEqual(ScreenB);\n});\n\nit('handles initial route navigation', () => {\n  const FooScreen = () => <div />;\n  const BarScreen = () => <div />;\n  const router = DrawerRouter(\n    {\n      Foo: {\n        screen: FooScreen,\n      },\n      Bar: {\n        screen: BarScreen,\n      },\n    },\n    { initialRouteName: 'Bar' }\n  );\n  const state = router.getStateForAction({\n    type: NavigationActions.NAVIGATE,\n    routeName: 'Foo',\n  });\n  expect(state).toEqual({\n    index: 0,\n    isDrawerOpen: false,\n    isTransitioning: false,\n    routes: [\n      {\n        key: 'Foo',\n        params: undefined,\n        routeName: 'Foo',\n      },\n      {\n        key: 'Bar',\n        params: undefined,\n        routeName: 'Bar',\n      },\n    ],\n  });\n});\n\nit('drawer opens, closes and toggles', () => {\n  const ScreenA = () => <div />;\n  const ScreenB = () => <div />;\n  const router = DrawerRouter({\n    Foo: { screen: ScreenA },\n    Bar: { screen: ScreenB },\n  });\n  const state = router.getStateForAction(INIT_ACTION);\n\n  expect(state.isDrawerOpen).toEqual(false);\n\n  const state2 = router.getStateForAction(\n    { type: DrawerActions.OPEN_DRAWER },\n    state\n  );\n\n  expect(state2.isDrawerOpen).toEqual(true);\n\n  const state3 = router.getStateForAction(\n    { type: DrawerActions.CLOSE_DRAWER },\n    state2\n  );\n\n  expect(state3.isDrawerOpen).toEqual(false);\n\n  const state4 = router.getStateForAction(\n    { type: DrawerActions.TOGGLE_DRAWER },\n    state3\n  );\n\n  expect(state4.isDrawerOpen).toEqual(true);\n});\n\nit('drawer opens, closes with key targeted', () => {\n  const ScreenA = () => <div />;\n  const ScreenB = () => <div />;\n  const router = DrawerRouter({\n    Foo: { screen: ScreenA },\n    Bar: { screen: ScreenB },\n  });\n  const state = router.getStateForAction(INIT_ACTION);\n  const state2 = router.getStateForAction(\n    { type: DrawerActions.OPEN_DRAWER, key: 'wrong' },\n    state\n  );\n\n  expect(state2.isDrawerOpen).toEqual(false);\n\n  const state3 = router.getStateForAction(\n    { type: DrawerActions.OPEN_DRAWER, key: state.key },\n    state2\n  );\n\n  expect(state3.isDrawerOpen).toEqual(true);\n});\n\nit('nested routers bubble up blocked actions', () => {\n  const ScreenA = () => <div />;\n  ScreenA.router = {\n    getStateForAction(action: { type: string }, lastState: any) {\n      if (action.type === 'CHILD_ACTION') return null;\n      return lastState;\n    },\n  };\n  const ScreenB = () => <div />;\n  const router = DrawerRouter({\n    Foo: { screen: ScreenA },\n    Bar: { screen: ScreenB },\n  });\n  const state = router.getStateForAction(INIT_ACTION);\n\n  const state2 = router.getStateForAction({ type: 'CHILD_ACTION' }, state);\n  expect(state2).toEqual(null);\n});\n\nit('drawer does not fire close when child routers return new state', () => {\n  const ScreenA = () => <div />;\n  ScreenA.router = {\n    getStateForAction(\n      action: { type: string },\n      lastState = { changed: false }\n    ) {\n      if (action.type === 'CHILD_ACTION')\n        return { ...lastState, changed: true };\n      return lastState;\n    },\n  };\n  const router = DrawerRouter({\n    Foo: { screen: ScreenA },\n  });\n\n  const state = router.getStateForAction(INIT_ACTION);\n  expect(state.isDrawerOpen).toEqual(false);\n\n  const state2 = router.getStateForAction({ type: 'CHILD_ACTION' }, state);\n  expect(state2.isDrawerOpen).toEqual(false);\n  expect(state2.routes[0].changed).toEqual(true);\n});\n\nit('drawerRouter will close drawer on child navigaton, not on child param changes', () => {\n  class FooView extends React.Component {\n    render() {\n      return <div />;\n    }\n  }\n  const BarRouter = SwitchRouter({\n    Qux: FooView,\n    Quo: FooView,\n  });\n  class BarView extends React.Component {\n    static router = BarRouter;\n    render() {\n      return <div />;\n    }\n  }\n  const router = DrawerRouter({\n    Bar: BarView,\n    Foo: FooView,\n  });\n\n  const emptyState = router.getStateForAction(NavigationActions.init());\n  const initState = router.getStateForAction(\n    DrawerActions.openDrawer(),\n    emptyState\n  );\n  expect(initState.isDrawerOpen).toBe(true);\n\n  const state0 = router.getStateForAction(\n    NavigationActions.navigate({ routeName: 'Quo' }),\n    initState\n  );\n  expect(state0.isDrawerOpen).toBe(false);\n\n  const initSwitchState = initState.routes[initState.index];\n  const initQuxState = initSwitchState.routes[initSwitchState.index];\n\n  const state1 = router.getStateForAction(\n    NavigationActions.setParams({\n      key: initQuxState.key,\n      params: { foo: 'bar' },\n    }),\n    initState\n  );\n  const state1switchState = state1.routes[state1.index];\n  const state1quxState = state1switchState.routes[state1switchState.index];\n  expect(state1.isDrawerOpen).toBe(true); // don't fire close\n  expect(state1quxState.params.foo).toEqual('bar');\n});\n\nit('goBack closes drawer when inside of stack', () => {\n  const ScreenA = () => <div />;\n  const DrawerScreen = () => <div />;\n  DrawerScreen.router = DrawerRouter({\n    Foo: { screen: ScreenA },\n    Bar: { screen: ScreenA },\n  });\n  const router = StackRouter({\n    Baz: { screen: ScreenA },\n    Drawer: { screen: DrawerScreen },\n  });\n  const state0 = router.getStateForAction(INIT_ACTION);\n  expect(state0.index).toEqual(0);\n  const state1 = router.getStateForAction(\n    NavigationActions.navigate({ routeName: 'Foo' }),\n    state0\n  );\n  expect(state1.index).toEqual(1);\n  const state2 = router.getStateForAction(DrawerActions.openDrawer(), state1);\n  const state3 = router.getStateForAction(\n    { type: DrawerActions.DRAWER_OPENED },\n    state2\n  );\n  expect(state3.index).toEqual(1);\n  expect(state3.routes[1].isDrawerOpen).toEqual(true);\n  const state4 = router.getStateForAction(NavigationActions.back(), state3);\n  expect(state4.routes[1].isDrawerOpen).toEqual(false);\n});\n"]}