{"version":3,"sources":["DrawerView.tsx"],"names":["React","Dimensions","StyleSheet","SceneView","ThemeColors","ThemeContext","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","Drawer","DrawerView","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","handleDrawerOpen","dispatch","openDrawer","key","handleDrawerClose","closeDrawer","updateWidth","setState","renderNavigationView","progress","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","getComponent","styles","content","map","route","includes","isFocused","absoluteFill","opacity","setDrawerGestureRef","ref","current","addEventListener","removeEventListener","drawerBackgroundColor","context","bodyContent","overlayColor","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","drawerLockMode","options","getDrawerBackgroundColor","getOverlayColor","isOpen","isDrawerOpen","backgroundColor","width","nextProps","prevState","PureComponent","contextType","defaultProps","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        contentComponent={this.props.navigationConfig.contentComponent}\n        contentOptions={this.props.navigationConfig.contentOptions}\n        drawerPosition={this.props.navigationConfig.drawerPosition}\n        style={this.props.navigationConfig.style}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      return (\n        <ScreenContainer style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = this.props.navigationConfig;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    const isOpen =\n      drawerLockMode === 'locked-closed'\n        ? false\n        : drawerLockMode === 'locked-open'\n        ? true\n        : this.props.navigation.state.isDrawerOpen;\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={isOpen}\n          locked={\n            drawerLockMode === 'locked-open' ||\n            drawerLockMode === 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}